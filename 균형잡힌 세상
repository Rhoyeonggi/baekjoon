#include <stdio.h>
#include <stdlib.h>

int main() {
	char s[101] = { 0 };
	char c_buff; // '\n'을 저장하는 역할
	while (1) {
		char bracket[101] = { 0 }; // 괄호중 '(', '['들만 집어넣는 배열
		int arr_idx = 0;
		int bracket_idx = -1; // 괄호가 들어가는 배열의 idx
		int possible = 1; // 1이면 가능 0이면 불가능
		scanf("%[^\n]s", s); // 문자열 사이에 있는 공백도 입력으로 받는다
		scanf("%c", &c_buff);
		if (s[0] == '.') break; // '.'이게 오면 끝낸다
		while (s[arr_idx] != '.') {
			if (s[arr_idx] == '(' || s[arr_idx] == '[') { // '(', '['경우에만 bracket에 집어넣는다
				bracket[++bracket_idx] = s[arr_idx++];
				continue;
			}
			else if (s[arr_idx] == ')') {
				if (bracket_idx > -1 && bracket[bracket_idx] == '(') { // bracket이 비어있지 않으면서 짝이 맞으면 bracket에 들어있는 괄호를 없애고 bracket_idx를 감소 -> 가장 위에있는 괄호를 바꿔줌
					bracket[bracket_idx--] = '\0';
					arr_idx++;
					continue;
				}
				else { // bracket이 비어있거나 짝이 맞지 않는 괄호면 바로 "no"를 출력한다
					possible = 0;
					break;
				}
			}
			else if (s[arr_idx] == ']') {
				if (bracket_idx > -1 && bracket[bracket_idx] == '[') {
					bracket[bracket_idx--] = '\0';
					arr_idx++;
					continue;
				}
				else { // 바로 위 else if와 같은 방법
					possible = 0;
					break;
				}
			}
			else arr_idx++;
		}
		(possible && bracket_idx == -1) ? printf("yes\n") : printf("no\n"); // bracket_idx가 -1이 아니면 짝을 못 찾은 괄호가 존재한다
	}
	return 0;
}
