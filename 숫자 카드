#include <stdio.h>
#include <stdlib.h>

int comp(int* a, int* b) {
	return *a - *b;
}

int BinarySearch(int start, int end, int target, int*arr) {
	if (start > end) return 0;  //언제 start > end 인지 생각해보면 왜 이경우에 return 0인지 알 수 있다
	int mid = (start + end) / 2;
	if (arr[mid] == target) return 1;
	else if (arr[mid] > target) return BinarySearch(start, mid - 1, target, arr);  //arr는 자체로 주소를 나타내기 때문에 arr로 쓰면 된다
	else return BinarySearch(mid + 1, end, target, arr);
}

int main() {
	int N, M;
	scanf("%d", &N);
	int* n_arr = (int*)calloc(N, sizeof(int));
	for (int n = 0; n < N; n++) {
		scanf("%d", &n_arr[n]);
	}
	qsort(n_arr, N, sizeof(int), comp);
	scanf("%d", &M);
	int* answer = (int*)calloc(M, sizeof(int));
	int target;
	for (int m = 0; m < M; m++) {
		scanf("%d", &target);
		answer[m] = BinarySearch(0, N - 1, target, n_arr);  //왜 N을 넣으면 틀리고 N - 1을 넣어야 답이 나오는지 생각해 보자
	}
	for (int a = 0; a < M; a++) {
		printf("%d ", answer[a]);
	}
	return 0;
}
