#include <stdio.h>
#include <stdlib.h>

int comp(int* a, int* b) {
	if (*a > *b) return 1;
	else if (*a == *b) return 0;
	else return -1;
}

/*
N = 5 / 입력: 1, 2, 3, 4, 5
num[5] = 33696019라는 값이 들어있다고 해보자(아마 주소값)
M = 1, 입력: 33696019라고 해보자
binary_search에 들어가면 mid = N이 나오는데 arr[mid] 즉 arr[5]에는 값이 들어있지 않다 하지만 주소값(?)이랑 비교를 하게 되면서 값은 값으로 인식하고 1을 반환하게 된다
즉, 5개이면 0~4까지 비교를 해야하지만 end에 N이 들어가면 경우에 따라 N까지 비교를 하게 되고 적당한 숫자가 입력되면 mid = N일때의 값과 같을 수 있어 1을 반환한다
*/

int binary_search(int start, int end, int t, int* arr) { // end가 N으로 들어올 경우 mid가 N이 될 수 있다
	while (start <= end) {
		int mid = (start + end) / 2; // N인경우에 우리가 지정한 값이 아닌 다른 값이 들어가 있는데 적절한 숫자를 넣으면 두 값이 같아져 1이 출력된다
		if (arr[mid] == t) return 1;
		else if (arr[mid] > t) end = mid - 1;
		else start = mid + 1;
	}
	return 0;
}

int main() {
	int N, M;
	scanf("%d", &N);
	int* num = (int*)calloc(N, sizeof(int));
	for (int i = 0; i < N; i++) {
		scanf("%d", &num[i]);
	}
	qsort(num, N, sizeof(int), comp);
	scanf("%d", &M);
	int target;
	int* answer = (int*)calloc(M, sizeof(int));
	for (int j = 0; j < M; j++) {
		scanf("%d", &target);
		answer[j] = binary_search(0, N - 1, target, num); // end값은 N이 아닌 N-1이 들어가야한다
	}
	for (int a = 0; a < M; a++) {
		printf("%d\n", answer[a]);
	}
	return 0;
}
